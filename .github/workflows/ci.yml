name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
permissions:
  contents: write
  packages: read
  pull-requests: write
# Prevent duplicate runs for PR and push events
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all tests
        run: npm test
        env:
          NODE_OPTIONS: --experimental-vm-modules
          CI: true

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_OPTIONS: --experimental-vm-modules
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, coverage]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full quality check
        run: npm run quality
        env:
          NODE_OPTIONS: --experimental-vm-modules
          CI: true

      - name: Validate package
        run: npm run validate
        env:
          NODE_OPTIONS: --experimental-vm-modules
          CI: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated --long || true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality-gate, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Create Release Tag
        id: tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.tag.outputs.version }}
          name: KRDS MCP Server v${{ steps.tag.outputs.version }}
          body: |
            ## KRDS MCP Server Release v${{ steps.tag.outputs.version }}

            ### Changes
            - See commit history for detailed changes

            ### Installation
            ```bash
            git clone git@github.com:KRDS-MCP/krds-mcp.git
            cd krds-mcp
            npm install
            ```

            ### Verification
            All tests passed ✅
            Security audit passed ✅
            Code quality checks passed ✅
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
